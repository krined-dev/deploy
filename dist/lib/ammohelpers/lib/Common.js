import*as THREE from"three";export const commons={createAmmoRigidBody(e,t,o=.7,r=.8,a={x:0,y:50,z:0},n=1){let m=new Ammo.btTransform;m.setIdentity(),m.setOrigin(new Ammo.btVector3(a.x,a.y,a.z));let l=t.quaternion;m.setRotation(new Ammo.btQuaternion(l.x,l.y,l.z,l.w));let s=t.scale;e.setLocalScaling(new Ammo.btVector3(s.x,s.y,s.z));let i=new Ammo.btDefaultMotionState(m),c=new Ammo.btVector3(0,0,0);e.calculateLocalInertia(n,c);let d=new Ammo.btRigidBodyConstructionInfo(n,i,e,c),h=new Ammo.btRigidBody(d);return h.setRestitution(o),h.setFriction(r),h},createConvexTriangleShapeAddToCompound(e,t){let o=this.generateTriangleShape(t,!0);this.addToCompound(e,t,o)},createConvexHullShapeAddToCompound(e,t,o){let r=this.generateConvexHullShapeFor(t,o);this.addToCompound(e,t,r)},createTriangleShapeAddToCompound(e,t){let o=this.generateTriangleShape(t,!1);this.addToCompound(e,t,o)},createBoxShapeAddToCompound(e,t){let o=new THREE.Vector3;t.getWorldScale(o);let r=t.geometry.parameters.width*o.x,a=t.geometry.parameters.height*o.y,n=t.geometry.parameters.depth*o.z,m=new Ammo.btBoxShape(new Ammo.btVector3(r/2,a/2,n/2));this.addToCompound(e,t,m)},createCylinderShapeAddToCompound(e,t){let o=t.geometry.parameters.radiusTop,r=t.geometry.parameters.height,a=new Ammo.btCylinderShape(new Ammo.btVector3(o,r/2,o));this.addToCompound(e,t,a)},addToCompound(e,t,o){let r=new Ammo.btTransform;r.setIdentity(),r.setOrigin(new Ammo.btVector3(t.position.x,t.position.y,t.position.z));let a=t.quaternion;r.setRotation(new Ammo.btQuaternion(a.x,a.y,a.z,a.w)),e.addChildShape(r,o)},createCylinderShape(e){let t=e.geometry.parameters.radiusTop,o=e.geometry.parameters.height;return new Ammo.btCylinderShape(new Ammo.btVector3(t,o/2,t))},createSphereShape(e){let t=e.geometry.parameters.radius;return new Ammo.btSphereShape(t)},createBoxShape(e){let t=e.geometry.parameters.width,o=e.geometry.parameters.height,r=e.geometry.parameters.depth;return new Ammo.btBoxShape(new Ammo.btVector3(t/2,o/2,r/2))},createConvexHullShape(e){let t=new Ammo.btConvexHullShape;for(let o=0;o<e.length;o++)t.addPoint(new Ammo.btVector3(e[o].x,e[o].y,e[o].z));return t},generateTriangleShape(e,t){let o,r=this.traverseModel(e),a=new Ammo.btTriangleMesh;for(let e=0;e<r.length;e+=9){let t=r[e],o=r[e+1],n=r[e+2],m=r[e+3],l=r[e+4],s=r[e+5],i=r[e+6],c=r[e+7],d=r[e+8],h=new Ammo.btVector3(t,o,n),p=new Ammo.btVector3(m,l,s),g=new Ammo.btVector3(i,c,d);a.addTriangle(h,p,g)}o=t?new Ammo.btConvexTriangleMeshShape(a,!1):new Ammo.btBvhTriangleMeshShape(a,!1);let n=e.scale;return o.setLocalScaling(new Ammo.btVector3(n.x,n.y,n.z)),o},generateConvexHullShapeFor(e,t,o){const r=new Ammo.btConvexHullShape;let a=new Ammo.btVector3(0,0,0),n=new Ammo.btVector3(0,0,0),m=new Ammo.btVector3(0,0,0),l=this.traverseModel(e,void 0,o);for(let e=0;e<l.length;e+=9)a.setX(l[e]),a.setY(l[e+1]),a.setZ(l[e+2]),r.addPoint(a,!0),t.push(new THREE.Vector3(a.x(),a.y(),a.z())),n.setX(l[e+3]),n.setY(l[e+4]),n.setZ(l[e+5]),r.addPoint(n,!0),t.push(new THREE.Vector3(n.x(),n.y(),n.z())),m.setX(l[e+6]),m.setY(l[e+7]),m.setZ(l[e+8]),r.addPoint(m,!0),t.push(new THREE.Vector3(m.x(),m.y(),m.z()));let s=e.scale;return r.setLocalScaling(new Ammo.btVector3(s.x,s.y,s.z)),r},traverseModel(e,t=[],o){if(e)if(e.geometry){let o=[...e.geometry.attributes.position.array];for(let t=0;t<o.length;t+=3)o[t]=o[t]*e.scale.x,o[t+1]=o[t+1]*e.scale.y,o[t+2]=o[t+2]*e.scale.z;console.log("** "+e.type+" Geometry ["+String(e.scale.x)+","+String(e.scale.y)+","+String(e.scale.z)+"]"),console.log("mesh.scale: "+e.scale.x+", "+e.scale.y+", "+e.scale.z),t.push(...o)}else console.log("** "+e.type+" **** ["+String(e.scale.x)+","+String(e.scale.y)+","+String(e.scale.z)+"]");let r=e.scale;return e.children.forEach(((e,a)=>{e.scale.x=e.scale.x*r.x,e.scale.y=e.scale.y*r.y,e.scale.z=e.scale.z*r.z,this.traverseModel(e,t,o)})),t},copyArray(e){let t=[];for(let o=0;o<e.length;o+=1)t.push(e[o]);return t}};